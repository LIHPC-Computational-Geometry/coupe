#!/bin/sh
set -e

. "$(dirname "$0")"/common.sh

command -v gnuplot >/dev/null || {
	echo "command 'gnuplot' not found" >&2
	exit 1
}

[ $# -lt 2 ] && {
	echo "usage: $0 BASELINE BENCHMARK_GROUPS..." >&2
	exit 1
}

BASELINE=$1
shift

csv="$BASELINE.strong.csv"
svg="$BASELINE.strong.svg"
csv_wt="$BASELINE.wt.csv"
svg_wt="$BASELINE.wt.svg"

bg_path() {
	benchmark_group=$1

	benchmark_dir=$(echo "$benchmark_group" | tr ':' '_' | cut -b-64)
	echo "$TARGET_DIR/criterion/$benchmark_dir"
}

time_ns() {
	benchmark_group=$1
	threads=$2

	path="$(bg_path "$benchmark_group")/threads=$threads/$BASELINE/estimates.json"
	if [ -f "$path" ]
	then jq -r '.mean.point_estimate' <"$path"
	else return 1
	fi
}

stddev_ns() {
	threads=$1

	path="$(bg_path "$benchmark_group")/threads=$threads/$BASELINE/estimates.json"
	if [ -f "$path" ]
	then jq -r '.mean.standard_error' <"$path"
	else return 1
	fi
}

sayfile Aggregating "$csv_wt"

thread_counts=$(
for benchmark_group in "$@"
do
	for bench in "$(bg_path "$benchmark_group")/threads="*
	do
		thread_count=$(echo "$bench" | sed 's/.*threads=\(.*\)/\1/')
		echo "$thread_count"
	done
done | sort -n | uniq
)

(
	printf "thread count"
	for benchmark_group in "$@"
	do
		group=$(echo "$benchmark_group" | tr ';' '_')
		printf ";%s" "$group"
	done
	printf "\n"
) >"$csv_wt"

echo "$thread_counts" | while read -r thread_count
do
	printf "%d" "$thread_count"
	for benchmark_group in "$@"
	do
		if t=$(time_ns "$benchmark_group" "$thread_count")
		then
			printf ";%f" "$t"
		else
			printf ";"
		fi
	done
	printf "\n"
done >>"$csv_wt"

sayfile Aggregating "$csv"

awk '
BEGIN { FS = ";"; OFS = ";" }
(NR == 1) { print }
(NR == 2) {
	for (i = 2; i <= NF; i++) { t_seq[i] = $i; $i = 1 }
	print
}
(NR > 2) {
	for (i = 2; i <= NF; i++) {
		if ($i != "") { $i = t_seq[i] / $i }
	}
	print
}
' "$csv_wt" >"$csv"

speedup_bound=$(awk '
	BEGIN { max_speedup = 0; FS = ";" }
	(NR > 1) {
		for (i = 2; i <= NF; i++) {
			if (max_speedup < $i) { max_speedup = $i }
		}
	}
	END { print max_speedup * 1.05 }
' "$csv")

max_thread_count=$(echo "$thread_counts" | tail -n1)
plot_cmds() {
	csv="$1"
	shift

	i=2
	for p in "$@"
	do
		p=$(echo "$p" | sed 's/_/\\_/g')
		printf "'%s' using 1:%d title '%s' with linespoints" "$csv" "$i" "$p"
		if [ $i -le $# ]
		then printf ", "
		fi
		i=$((i+1))
	done
}

sayfile Rendering "$svg"

gnuplot <<EOF
	set output '$svg'
	set datafile separator ';'
	set term svg size 1366,768

	set title '$TITLE - strong scaling'
	set xlabel 'Number of threads'
	set ylabel 'Speedup'
	set xrange [1:$max_thread_count]
	set yrange [1:$speedup_bound]
	set grid ytics
	plot x title 'Ideal' dashtype 2, $(plot_cmds "$csv" "$@")
EOF

sayfile Rendering "$svg_wt"

gnuplot <<EOF
	set output '$svg_wt'
	set datafile separator ';'
	set term svg size 1366,768

	set title '$TITLE - wall time'
	set xlabel 'Number of threads'
	set ylabel 'Wall time (ns)'
	set xrange [1:$max_thread_count]
	set logscale y 10
	set grid ytics
	plot $(plot_cmds "$csv_wt" "$@")
EOF
