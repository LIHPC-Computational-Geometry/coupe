var searchIndex = JSON.parse('{\
"apply_part":{"doc":"","t":"RF","n":["USAGE","main"],"q":[[0,"apply_part"],[2,"anyhow"]],"d":["",""],"i":[0,0],"f":[0,[[],[[2,[1]]]]],"c":[],"p":[[15,"tuple"],[6,"Result",2]],"b":[]},\
"apply_weight":{"doc":"","t":"RFF","n":["USAGE","apply","main"],"q":[[0,"apply_weight"],[3,"mesh_io"],[4,"core::iter::traits::iterator"],[5,"anyhow"]],"d":["","",""],"i":[0,0,0],"f":[0,[[1,-1],2,3],[[],[[4,[2]]]]],"c":[],"p":[[3,"Mesh",3],[15,"tuple"],[8,"Iterator",4],[6,"Result",5]],"b":[]},\
"coupe":{"doc":"A mesh partitioning library that implements multithreaded, …","t":"DDIINDIDSEQDDIDDIDDDENNDDDIQDNQNIGGGDDIDDIDIDIDLLLLLLLKMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMAMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMLLKLMMMMMMMMMMMMMMMMMLLLLLLLLCLLKLLLLFMCLMMMMMMMMMMMLKLLLLLLLLLLLLLLLLLMLLMCLLLLLLLLLMMCLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMMMLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLLLLLLLLLLLLLLLLLMMMMFFFF","n":["ArcSwap","AsMetadata","AsWeight","Average","BiPartitioningOnly","BoundingBox","CkkWeight","CompleteKarmarkarKarp","EPSILON","Error","Error","FiducciaMattheyses","FmMetadata","FmWeight","GraphGrowth","Greedy","GreedyWeight","Grid","GridNeighbors","HilbertCurve","HilbertCurveError","InputLenMismatch","InvalidOrder","KMeans","KarmarkarKarp","KernighanLin","KkWeight","Metadata","MultiJagged","NegativeValues","Neighbors","NotFound","Partition","Point2D","Point3D","PointND","Random","Rcb","RcbWeight","Real","Rib","Topology","VnBest","VnBestWeight","VnFirst","VnFirstWeight","ZCurve","abs","add","add","add","add","add_assign","add_assign","avg","bad_balance_count","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","center","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","contains","data","data","data","default","default","default","default","default","default","default","default","default","default","delta_threshold","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","distance_to_point","div","div","div","div","div_assign","div_assign","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","drop","edge_cut","edge_cut","edge_cut_gain","eq","erode","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_i64","from_points","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_u64","hilbert","imbalance","imbalance_tol","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","init","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","is_empty","is_empty","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_zero","iter_count","iter_count","lambda_cut","lambda_cut","len","len","locked_count","max_bad_move_in_a_row","max_bad_move_in_a_row","max_balance_iter","max_flips_per_pass","max_imbalance","max_imbalance","max_imbalance_per_flip","max_iter","max_iter","max_moves_per_pass","max_passes","max_passes","mbr_early_break","move_attempts","move_count","moves_per_pass","mul","mul","mul","mul","mul_acc","mul_assign","mul_assign","multiunzip","nalgebra","neg","neg","neighbors","neighbors","new_2d","new_3d","next","nextafter","no_gain_count","num_traits","one","order","order","p_max","p_min","part_count","part_count","part_count","part_count","part_count","part_count","part_count","partial_cmp","partition","partition","partition","partition","partition","partition","partition","partition","partition","partition","partition","partition","partition","partition","partition","partition","partition","partition","pass_count","product","product","race_count","rayon","rcb","rcb","region","rem","rem","rem","rem","rem_assign","rem_assign","rewinded_moves_per_pass","rng","sprs","sub","sub","sub","sub","sub_aabb","sub_assign","sub_assign","sum","sum","to_i64","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_u64","tolerance","tolerance","tolerance","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","vertices_per_thread","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","vzip","zero","actual","expected","actual","max","compute_parts_load","imbalance","imbalance_target","max_imbalance"],"q":[[0,"coupe"],[683,"coupe::Error"],[685,"coupe::HilbertCurveError"],[687,"coupe::imbalance"],[691,"core::cmp"],[692,"core::marker"],[693,"core::iter::traits::accum"],[694,"core::marker"],[695,"core::fmt"],[696,"rayon::iter"],[697,"core::num::nonzero"],[698,"num_traits::identities"],[699,"core::result"],[700,"core::iter::traits::collect"],[701,"sprs::sparse"],[702,"core::convert"],[703,"rand::rng"],[704,"core::iter::traits::iterator"],[705,"core::cmp"],[706,"num_traits::cast"],[707,"alloc::string"],[708,"core::any"],[709,"alloc::vec"]],"d":["Arc-swap","Diagnostic data for a ArcSwap run.","Trait alias for values accepted as weights by ArcSwap.","Compute the average of two values without overflow.","When a partition improving algorithm is given more than 2 …","Axis-aligned bounding box.","Trait alias for values accepted as weights by …","Complete Karmarkar-Karp algorithm","","Common errors thrown by algorithms.","Error details, should the algorithm fail to run.","FiducciaMattheyses","Diagnostic data for a Fiduccia-Mattheyses run.","Trait alias for values accepted as weights by …","Graph Growth algorithm","Greedy number partitioning algorithm","Trait alias for values accepted as weights by Greedy.","Representation of a cartesian mesh.","An iterator over the neighbors of a grid cell.","Hilbert space-filling curve algorithm","","Input sets don’t have matching lengths.","Invalid space filling curve order.","K-means algorithm","Karmarkar-Karp algorithm","KernighanLin algorithm","Trait alias for values accepted as weights by KarmarkarKarp…","Diagnostic data returned for a specific run of the …","Multi-Jagged algorithm","Input contains negative values and such values are not …","Return type for <code>Topology::neighbors</code>.","No partition that matches the given criteria could been …","The <code>Partition</code> trait allows for partitioning data.","","","","Map elements to parts randomly.","Recursive Coordinate Bisection algorithm","Trait alias for values accepted as weights by Rcb and Rib.","A floating-point value that cannot be NAN nor infinity.","Recursive Inertial Bisection algorithm","<code>Topology</code> is implemented for types that represent mesh …","Steepest descent Vector-of-Numbers algorithm","Trait alias for values accepted as weights by VnBest.","Descent Vector-of-Numbers algorithm","Trait alias for values accepted as weights by VnFirst.","Z space-filling curve algorithm","","","","","","","","","Number of times threads have picked a vertex that would …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The data storage that contains all the matrix components. …","The data storage that contains all the matrix components. …","The data storage that contains all the matrix components. …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The edge cut of a partition.","The edge cut of a partition.","By how much the edge cut has been reduced by the algorithm.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Returns the argument unchanged.","","The axis-aligned <em>minimum</em> bounding box.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Whether the topology has no elements.","Whether the topology has no elements.","","","","","","","","","","","","","","","","","","","","","","","","","","The number of iterations of the algorithm. This will yield …","The number of iterations of the algorithm. This will yield …","The λ-1 cut (lambda-1 cut) of a partition.","The λ-1 cut (lambda-1 cut) of a partition.","The number of elements in the mesh.","","Number of times threads have picked a locked vertex.","How many moves that yield negative gains can be made …","","","","Restrict moves made by ArcSwap such that the imbalance of …","If <code>Some(max)</code> then the algorithm will not move vertices in …","","","","If <code>Some(max)</code> then the algorithm will not do more than <code>max</code> …","If <code>Some(max)</code> then the algorithm will not do more than <code>max</code> …","","","Number of attempts to move vertices.","Number of times vertices has been moved.","Move count for each pass, included discarded moves by …","","","","","","","","","","","","An iterator over the neighbors of the given vertex.","","Define a new 2D grid.","Define a new 3D grid.","","","Number of times threads have picked a vertex with negative …","","","","","","","","","","","","","","","Partition the given data and output the part ID of each …","","","","","","","","","","","","","","","","","","Number of passes.","","","Number of times threads found out the vertex they picked …","","Run RCB on the 3D grid.","Run RCB on the 2D grid.","","","","","","","","Number of moves that have been discarded for each pass.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Constraint on the normalized imbalance between the two …","Tolerance on the normalized imbalance, for each split.  …","Same meaning as <code>Rcb::tolerance</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Number of vertices distributed to each thread at the start …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Compute the imbalance of the given partition.","",""],"i":[0,0,0,0,22,0,0,0,1,0,63,0,0,0,0,0,0,0,0,0,0,22,11,0,0,0,0,63,0,22,45,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,64,5,5,6,7,26,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,35,23,37,3,1,5,6,7,26,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,35,23,37,3,1,3,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,3,1,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,3,1,1,3,51,52,4,5,6,26,8,12,13,14,17,18,1,13,5,6,7,26,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,35,23,37,3,1,5,6,7,26,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,35,23,37,3,1,3,1,1,1,1,1,1,5,6,7,26,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,35,23,37,3,1,45,45,5,1,13,5,6,7,26,8,9,10,11,11,12,13,14,15,16,17,18,19,20,21,22,22,35,23,37,3,1,1,1,5,6,7,26,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,35,23,37,3,1,1,1,1,1,1,3,5,6,7,26,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,35,23,37,3,1,1,13,0,13,5,6,7,26,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,35,23,37,3,1,5,6,7,26,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,35,23,37,3,1,37,45,45,5,6,7,26,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,35,23,37,3,1,1,17,18,45,45,45,23,5,8,14,13,14,6,8,14,13,16,8,8,14,13,5,5,26,1,1,1,1,1,1,1,37,0,1,1,45,23,23,23,37,0,5,0,1,12,21,3,3,9,10,12,15,16,21,35,1,63,6,7,8,9,10,12,12,13,14,15,16,17,18,19,20,21,35,5,1,1,5,0,23,23,3,1,1,1,1,1,1,26,35,0,1,1,1,1,3,1,1,1,1,1,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,3,1,11,22,1,5,6,7,26,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,35,23,37,3,1,5,6,7,26,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,35,23,37,3,1,1,7,17,18,5,6,7,26,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,35,23,37,3,1,5,6,7,26,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,35,23,37,3,1,5,6,7,26,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,35,23,37,3,1,5,5,6,7,26,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,35,23,37,3,1,1,65,65,66,66,0,0,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],2],[[1,1],2],[[-1,-1],-1,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[3,4],[5,5],[6,6],[7,7],[8,8],[9,9],[10,10],[11,11],[12,12],[13,13],[14,14],[15,15],[16,16],[17,17],[18,18],[19,19],[20,20],[21,21],[22,22],[23,23],[3,3],[1,1],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[-1,-2],2,[],[]],[[1,1],24],[[3,4],25],0,0,0,[[],5],[[],6],[[],26],[[],8],[[],12],[[],13],[[],14],[[],17],[[],18],[[],1],0,[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[27,-1,[]],[[3,4],28],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],2],[[1,1],2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[27,2],[[-1,[29,[27]]],-2,30,[31,32]],[[-1,[29,[27]]],-2,30,[31,32]],0,[[1,1],25],0,[[5,33],34],[[6,33],34],[[7,33],34],[[26,33],34],[[8,33],34],[[9,33],34],[[10,33],34],[[11,33],34],[[11,33],34],[[12,33],34],[[13,33],34],[[14,33],34],[[15,33],34],[[16,33],34],[[17,33],34],[[18,33],34],[[19,33],34],[[20,33],34],[[21,33],34],[[22,33],34],[[22,33],34],[[[35,[-1]],33],34,36],[[23,33],34],[[[37,[-1]],33],34,36],[[3,33],34],[[1,33],34],[[1,33],34],[[1,33],34],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[28,1],[27,1],[27,1],[28,1],[-1,-1,[]],[38,[[39,[1]]]],[-1,[[39,[3]]],40],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[41,[[39,[1]]]],0,0,0,[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[[],27],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[-1,25,[]],[1,25],0,0,[[-1,[29,[27]],-2],[],30,40],[[-1,[29,[27]],-2],[],30,40],[-1,27,[]],[23,27],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[-1,-2,-3],2,[],[],[]],[[1,1],2],[[1,1],2],[-1,[[2,[-2,-3]]],[],[],[]],0,[1,1],[1,1],[[-1,27],[],[]],[[23,27]],[[42,42],23],[[42,42,42],23],[[[37,[-1]]],39,43],[[28,28],28],0,0,[[],1],0,0,0,0,0,0,0,0,0,0,0,[[1,1],[[39,[24]]]],[[-1,[29,[27]],-2],44,[],[]],[[6,[29,[27]],[2,[-1,[29,[-2]]]]],44,[[45,[38]],30],46],[[7,[29,[27]],-1],44,47],[[8,[29,[27]],[2,[-1,[29,[-2]]]]],44,[[45,[38]],30],48],[[9,[29,[27]],[2,[[49,[28]],-1]]],44,[[50,[[29,[28]]]]]],[[10,[29,[27]],-1],44,47],[[12,[29,[27]],[2,[[29,[51]],-1]]],44,[[50,[[29,[28]]]]]],[[12,[29,[27]],[2,[[29,[52]],-1]]],44,[[50,[[29,[28]]]]]],[[13,[29,[27]],[2,[[29,[4]],[29,[28]]]]],44],[[14,[29,[27]],[2,[-1,[29,[28]]]]],44,[[45,[28]],30]],[[15,[29,[27]],-1],44,47],[[16,[29,[27]],[2,[[29,[4]],[29,[28]]]]],44],[[17,[29,[27]],[2,[-1,-2]]],44,40,40],[[18,[29,[27]],[2,[[29,[4]],-1]]],44,40],[[19,[29,[27]],-1],44,47],[[20,[29,[27]],[29,[-1]]],44,53],[[21,[29,[27]],[29,[4]]],44],[[[35,[-1]],[29,[27]],2],44,54],0,[-1,1,55],[-1,1,55],0,0,[[23,[29,[27]],[29,[-1]],27],2,[32,30,56,57,31,[58,[28]]]],[[23,[29,[27]],[29,[-1]],27],2,[32,30,56,57,31,[58,[28]]]],[[3,4],[[39,[59]]]],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],2],[[1,1],2],0,0,0,[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],1],[[3,59],3],[[1,1],2],[[1,1],2],[-1,1,55],[-1,1,55],[1,[[39,[38]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,60,[]],[-1,60,[]],[-1,60,[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,[[39,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,[[39,[41]]]],0,0,0,[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,[[44,[-2]]],[],[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],[-1,61,[]],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],1],0,0,0,0,[[[29,[27]],27,-1],62,40],[[27,[29,[27]],-1],28,40],[[29,[29,[27]],-1],[],40],[[27,[29,[27]],-1],[],40]],"c":[],"p":[[3,"Real",0],[15,"tuple"],[3,"BoundingBox",0],[6,"PointND",0],[3,"AsMetadata",0],[3,"ArcSwap",0],[3,"CompleteKarmarkarKarp",0],[3,"FiducciaMattheyses",0],[3,"GraphGrowth",0],[3,"Greedy",0],[4,"HilbertCurveError",0],[3,"HilbertCurve",0],[3,"KMeans",0],[3,"KernighanLin",0],[3,"KarmarkarKarp",0],[3,"MultiJagged",0],[3,"Rcb",0],[3,"Rib",0],[3,"VnBest",0],[3,"VnFirst",0],[3,"ZCurve",0],[4,"Error",0],[3,"Grid",0],[4,"Ordering",691],[15,"bool"],[3,"FmMetadata",0],[15,"usize"],[15,"f64"],[15,"slice"],[8,"Sync",692],[8,"Sum",693],[8,"Send",692],[3,"Formatter",694],[6,"Result",694],[3,"Random",0],[8,"Debug",694],[3,"GridNeighbors",0],[15,"i64"],[4,"Option",695],[8,"IntoParallelIterator",696],[15,"u64"],[3,"NonZeroUsize",697],[8,"One",698],[4,"Result",699],[8,"Topology",0],[8,"AsWeight",0],[8,"IntoIterator",700],[8,"FmWeight",0],[6,"CsMatView",701],[8,"AsRef",702],[6,"Point2D",0],[6,"Point3D",0],[8,"VnFirstWeight",0],[8,"Rng",703],[8,"Iterator",704],[8,"PartialOrd",691],[8,"Num",705],[8,"AsPrimitive",706],[15,"u32"],[3,"String",707],[3,"TypeId",708],[3,"Vec",709],[8,"Partition",0],[8,"Average",0],[13,"InputLenMismatch",683],[13,"InvalidOrder",685]],"b":[[48,"impl-Add-for-Real"],[49,"impl-Add%3C%26Real%3E-for-%26Real"],[50,"impl-Add%3C%26Real%3E-for-Real"],[51,"impl-Add%3CReal%3E-for-%26Real"],[52,"impl-AddAssign-for-Real"],[53,"impl-AddAssign%3C%26Real%3E-for-Real"],[212,"impl-Div%3CReal%3E-for-%26Real"],[213,"impl-Div%3C%26Real%3E-for-Real"],[214,"impl-Div%3C%26Real%3E-for-%26Real"],[215,"impl-Div-for-Real"],[216,"impl-DivAssign-for-Real"],[217,"impl-DivAssign%3C%26Real%3E-for-Real"],[254,"impl-Display-for-Error"],[255,"impl-Debug-for-Error"],[266,"impl-Display-for-Error"],[267,"impl-Debug-for-Error"],[272,"impl-Debug-for-Real"],[273,"impl-Display-for-Real"],[274,"impl-UpperExp-for-Real"],[298,"impl-From%3Cf64%3E-for-Real"],[299,"impl-From%3Cusize%3E-for-Real"],[300,"impl-From%3C%26usize%3E-for-Real"],[301,"impl-From%3C%26f64%3E-for-Real"],[432,"impl-Mul%3CReal%3E-for-%26Real"],[433,"impl-Mul-for-Real"],[434,"impl-Mul%3C%26Real%3E-for-%26Real"],[435,"impl-Mul%3C%26Real%3E-for-Real"],[437,"impl-MulAssign-for-Real"],[438,"impl-MulAssign%3C%26Real%3E-for-Real"],[441,"impl-Neg-for-%26Real"],[442,"impl-Neg-for-Real"],[470,"impl-Partition%3C(%26%5BMatrix%3Cf64,+Const%3C2%3E,+Const%3C1%3E,+ArrayStorage%3Cf64,+2,+1%3E%3E%5D,+W)%3E-for-HilbertCurve"],[471,"impl-Partition%3C(%26%5BMatrix%3Cf64,+Const%3C3%3E,+Const%3C1%3E,+ArrayStorage%3Cf64,+3,+1%3E%3E%5D,+W)%3E-for-HilbertCurve"],[483,"impl-Product-for-Real"],[484,"impl-Product%3C%26Real%3E-for-Real"],[487,"impl-Grid%3C3%3E"],[488,"impl-Grid%3C2%3E"],[490,"impl-Rem-for-Real"],[491,"impl-Rem%3C%26Real%3E-for-%26Real"],[492,"impl-Rem%3C%26Real%3E-for-Real"],[493,"impl-Rem%3CReal%3E-for-%26Real"],[494,"impl-RemAssign%3C%26Real%3E-for-Real"],[495,"impl-RemAssign-for-Real"],[499,"impl-Sub-for-Real"],[500,"impl-Sub%3C%26Real%3E-for-Real"],[501,"impl-Sub%3CReal%3E-for-%26Real"],[502,"impl-Sub%3C%26Real%3E-for-%26Real"],[504,"impl-SubAssign%3C%26Real%3E-for-Real"],[505,"impl-SubAssign-for-Real"],[506,"impl-Sum%3C%26Real%3E-for-Real"],[507,"impl-Sum-for-Real"]]},\
"coupe_tools":{"doc":"","t":"DENNNEDGNDGNNINNNLFLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALFFLFFLKLLLLLLLLLLLLLLLLLLLLLLLLLLLFLLLLLLLFFDDFLLLLLLLLFLLLLLLLLLLLLLLLLLLLLLLLLL","n":["EdgeWeightDistError","EdgeWeightDistribution","Linear","MeditAscii","MeditBinary","MeshFormat","MeshFormatError","Metadata","None","Problem","Runner","Some","Sqrt","ToRunner","Uniform","VtkAscii","VtkBinary","adjacency","barycentres","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","drop","drop","drop","drop","drop","dual","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from_str","from_str","from_subset","from_subset","from_subset","from_subset","from_subset","init","init","init","init","init","into","into","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","ittapi","new","parse_algorithm","parse_args","points","read_mesh","set_edge_weights","to_owned","to_runner","to_string","to_string","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","used_element_count","vzip","vzip","vzip","vzip","vzip","weights","without_mesh","write_mesh","writer","Domain","Task","begin","borrow","borrow","borrow_mut","borrow_mut","deref","deref","deref_mut","deref_mut","domain","drop","drop","drop","from","from","from_subset","from_subset","init","init","into","into","is_in_subset","is_in_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","vzip","vzip"],"q":[[0,"coupe_tools"],[125,"coupe_tools::ittapi"],[162,"sprs::sparse"],[163,"mesh_io"],[164,"coupe::geometry"],[165,"alloc::vec"],[166,"sprs::sparse"],[167,"core::fmt"],[168,"mesh_io::weight"],[169,"alloc::boxed"],[170,"getopts"],[171,"getopts"],[172,"core::option"],[173,"core::result"],[174,"core::any"],[175,"std::io"]],"d":["","","","","","","","","No value.","","","Some value of type <code>T</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The adjacency matrix that models the dual graph of the …","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","Wrapper around ittapi to avoid spreading #cfg flags in the …","","","Helper to handle help and version options automatically.","","Helper to read a mesh either from stdin or from a file.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The number of elements that are taken into account for …","","","","","","","","Helper to write a mesh, either to stdout or to a file, in …","Helper function to retrieve the Write implementation …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[0,0,7,17,17,0,0,0,33,0,0,33,7,0,7,17,17,1,0,1,17,7,12,15,1,17,7,12,15,7,7,1,17,7,12,15,1,17,7,12,15,1,17,7,12,15,0,7,12,12,15,15,1,17,7,12,15,17,7,1,17,7,12,15,1,17,7,12,15,1,17,7,12,15,1,17,7,12,15,0,1,0,0,1,0,0,7,20,12,15,1,17,7,12,15,1,17,7,12,15,1,17,7,12,15,1,17,7,12,15,1,17,7,12,15,0,1,17,7,12,15,1,1,0,0,0,0,0,31,32,31,32,31,32,31,32,0,31,32,32,31,32,31,32,31,32,31,32,31,32,31,32,31,32,31,32,31,32,31,32,31,32],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[1,[[3,[2]]]],[4,[[6,[5]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[7,7],[[-1,-2],8,[],[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,8],[9,8],[9,8],[9,8],[9,8],[4,[[10,[2]]]],[[7,7],11],[[12,13],14],[[12,13],14],[[15,13],14],[[15,13],14],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[16,[[18,[17]]]],[16,[[18,[7]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],9],[[],9],[[],9],[[],9],[[],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],[-1,11,[]],0,[[4,19,7],1],[16,[[18,[[21,[20]]]]]],[[22,16,9],[[18,[23]]]],[1,[[24,[5]]]],[[[26,[25]]],[[18,[4]]]],[[[10,[2]],19,7],8],[-1,-2,[],[]],[[-1,1],27,[]],[-1,25,[]],[-1,25,[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],[4,9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,19],[19,1],[[4,[26,[17]],[26,[25]]],[[18,[8]]]],[[[26,[25]]],[[18,[[0,[30]]]]]],0,0,[[31,16],32],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[16,31],[9,8],[32,8],[9,8],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],9],[[],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,11,[]],[-1,11,[]],[-1,[[26,[-2]]],[],[]],[-1,[[26,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,[[28,[-2]]],[],[]],[-1,29,[]],[-1,29,[]],[-1,-2,[],[]],[-1,-2,[],[]]],"c":[],"p":[[3,"Problem",0],[15,"f64"],[6,"CsMatView",162],[3,"Mesh",163],[6,"PointND",164],[3,"Vec",165],[4,"EdgeWeightDistribution",0],[15,"tuple"],[15,"usize"],[6,"CsMat",162],[15,"bool"],[3,"EdgeWeightDistError",0],[3,"Formatter",166],[6,"Result",166],[3,"MeshFormatError",0],[15,"str"],[4,"MeshFormat",0],[6,"Result",167],[4,"Array",168],[8,"ToRunner",0],[3,"Box",169],[3,"Options",170],[3,"Matches",170],[15,"slice"],[3,"String",171],[4,"Option",172],[6,"Runner",0],[4,"Result",173],[3,"TypeId",174],[8,"Write",175],[3,"Domain",125],[3,"Task",125],[6,"Metadata",0]],"b":[[48,"impl-Display-for-EdgeWeightDistError"],[49,"impl-Debug-for-EdgeWeightDistError"],[50,"impl-Display-for-MeshFormatError"],[51,"impl-Debug-for-MeshFormatError"]]},\
"mesh_dup":{"doc":"","t":"RF","n":["USAGE","main"],"q":[[0,"mesh_dup"],[2,"anyhow"]],"d":["",""],"i":[0,0],"f":[0,[[],[[2,[1]]]]],"c":[],"p":[[15,"tuple"],[6,"Result",2]],"b":[]},\
"mesh_io":{"doc":"","t":"NENENNNDNNNGNNNNNLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLALLLLLLLALLLLLLLLLLLLLLLAADDLLLLLLLLLLLLLLLLFFFFLLLLLLLLNNENNGNLLLLLLLFLLLLLFDLLLLLLFFLLLLENNENNNNGNLLLLLLLLLLLLFLLLLLLLLFF","n":["Edge","ElementType","Err","Error","Hexahedron","Io","Medit","Mesh","Ok","Quadrangle","Quadrilateral","Result","Tetrahedron","Triangle","UnknownFormat","Vertex","Vtk","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","coordinates","default","dimension","dimension","display_medit_ascii","display_vtk_ascii","duplicate","element_count","elements","elements_mut","eq","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from_file","from_raw_parts","from_reader","from_str","from_str","into","into","into","medit","new","node","node_count","node_count","node_refs","nodes","nodes_mut","partition","refine","serialize_medit_binary","serialize_vtk_binary","to_owned","to_string","topology","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vtk","weight","DisplayAscii","ParseError","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","fmt","fmt","from","from","from","from","from","from","into","into","parse_ascii","parse_binary","test_format_ascii","test_format_binary","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","BadHeader","Err","Error","Io","Ok","Result","UnsupportedVersion","borrow","borrow_mut","fmt","fmt","from","from","into","read","source","to_string","try_from","try_into","type_id","write","DisplayAscii","borrow","borrow_mut","fmt","fmt","from","into","parse_legacy","test_format_legacy","to_string","try_from","try_into","type_id","Array","BadHeader","Err","Error","Floats","Integers","Io","Ok","Result","UnsupportedVersion","borrow","borrow","borrow_mut","borrow_mut","fmt","fmt","fmt","from","from","from","into","into","read","source","to_string","try_from","try_from","try_into","try_into","type_id","type_id","write_floats","write_integers"],"q":[[0,"mesh_io"],[81,"mesh_io::medit"],[111,"mesh_io::partition"],[132,"mesh_io::vtk"],[145,"mesh_io::weight"],[178,"core::iter::traits::iterator"],[179,"core::fmt"],[180,"core::fmt"],[181,"vtkio"],[182,"std::io::error"],[183,"std::path"],[184,"core::convert"],[185,"alloc::vec"],[186,"std::io"],[187,"core::result"],[188,"std::io::error"],[189,"core::any"],[190,"core::num::dec2flt"],[191,"core::num::error"],[192,"std::io::error"],[193,"core::option"],[194,"core::iter::traits::collect"]],"d":["","","Contains the error value","Parse error.","","","","Mesh data structure.","Contains the success value","","","","","","","","","","","","","","","","","Returns a slice of f64 representing the coordinates of the …","","","Returns the dimension of the mesh (2D, 3D, …)","","","Place copies of self side by side in order to form a grid.","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","Returns the argument unchanged.","","Import a mesh from a file.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","This module allows to load Medit mesh files, as described …","","","","Returns the number of nodes (vertices) of the mesh.","Returns the references to the points of the mesh.","","","Partition file format encoder/decoder.","Split each element in N smaller elements of the same type, …","","","","","Returns a slice of matrices containing the connectivity …","","","","","","","","","","","Weight file format encoder/decoder.","Deserialize a mesh into the ASCII MEDIT format.","","","","","","","","","","Returns the argument unchanged.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","Contains the error value","","","Contains the success value","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","Wrapping <code>r</code> in a <code>std::io::BufReader</code> is recommended.","","","","","","Wrapping <code>w</code> in a <code>std::io::BufWriter</code> is recommended.","Deserialize a mesh into the ASCII, legacy VTK format.","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","Contains the error value","","","","","Contains the success value","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Wrapping <code>r</code> in a <code>std::io::BufReader</code> is recommended.","","","","","","","","","Wrapping <code>w</code> in a <code>std::io::BufWriter</code> is recommended.","Wrapping <code>r</code> in a <code>std::io::BufWriter</code> is recommended."],"i":[1,0,18,0,1,13,13,0,18,1,1,0,1,1,13,1,13,1,3,13,1,3,13,1,1,3,3,1,3,3,3,3,3,3,3,1,1,3,13,13,1,1,3,13,13,13,13,3,3,3,1,3,1,3,13,0,3,3,1,3,3,3,3,0,3,3,3,1,13,3,1,3,13,1,3,13,1,3,13,0,0,0,0,17,7,17,7,17,17,7,7,17,17,17,17,17,7,17,7,0,0,0,0,17,7,17,7,17,7,17,7,34,35,0,34,35,0,34,34,34,34,34,34,34,34,0,34,34,34,34,34,0,0,8,8,8,8,8,8,0,0,8,8,8,8,0,41,42,0,40,40,41,42,0,41,40,41,40,41,40,41,41,40,41,41,40,41,0,41,41,40,41,40,41,40,41,0,0],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],[3,[[5,[4]]]],[[],3],[1,6],[3,6],[3,7],[3,8],[[3,6],3],[3,6],[3,[[0,[9]]]],[3,[[0,[9]]]],[[1,1],10],[[1,11],12],[[3,11],12],[[13,11],12],[[13,11],12],[-1,-1,[]],[14,1],[-1,-1,[]],[15,13],[16,13],[-1,-1,[]],[17,13],[-1,[[18,[3]]],[[20,[19]]]],[[6,[21,[4]],[21,[22]],[21,[[2,[1,[21,[6]],[21,[22]]]]]]],3],[-1,[[18,[3]]],23],[24,[[25,[1,2]]]],[24,[[18,[3]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[6,3],[[3,6],[[5,[4]]]],[1,6],[3,6],[3,[[5,[22]]]],[3,[[0,[9]]]],[3,[[0,[9]]]],0,[3,3],[[3,-1],[[26,[2]]],27],[[3,-1],[[26,[2]]],27],[-1,-2,[],[]],[-1,28,[]],[3,[[5,[[2,[1,[21,[6]],[21,[22]]]]]]]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,29,[]],[-1,29,[]],[-1,29,[]],0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[17,11],12],[[17,11],12],[[7,11],12],[[7,11],12],[-1,-1,[]],[30,17],[16,17],[31,17],[32,17],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[25,[3,17]]],23],[-1,[[25,[3,17]]],23],[[[5,[33]]],10],[[[5,[33]]],10],[-1,28,[]],[-1,28,[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,29,[]],[-1,29,[]],0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[34,11],12],[[34,11],12],[-1,-1,[]],[16,34],[-1,-2,[],[]],[-1,[[35,[[21,[6]]]]],36],[34,[[38,[37]]]],[-1,28,[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,29,[]],[[-1,-2],[[26,[2]]],27,39],0,[-1,-2,[],[]],[-1,-2,[],[]],[[8,11],12],[[8,11],12],[-1,-1,[]],[-1,-2,[],[]],[-1,[[25,[3,15]]],23],[[[5,[33]]],10],[-1,28,[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,29,[]],0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[40,11],12],[[41,11],12],[[41,11],12],[-1,-1,[]],[16,41],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[42,[40]]],36],[41,[[38,[37]]]],[-1,28,[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,[[25,[-2]]],[],[]],[-1,29,[]],[-1,29,[]],[[-1,-2],[[42,[2]]],27,39],[[-1,-2],[[42,[2]]],27,39]],"c":[],"p":[[4,"ElementType",0],[15,"tuple"],[3,"Mesh",0],[15,"f64"],[15,"slice"],[15,"usize"],[3,"DisplayAscii",81],[3,"DisplayAscii",132],[8,"Iterator",178],[15,"bool"],[3,"Formatter",179],[6,"Result",179],[4,"Error",0],[4,"CellType",180],[4,"Error",181],[3,"Error",182],[3,"ParseError",81],[6,"Result",0],[3,"Path",183],[8,"AsRef",184],[3,"Vec",185],[15,"isize"],[8,"BufRead",186],[15,"str"],[4,"Result",187],[6,"Result",182],[8,"Write",186],[3,"String",188],[3,"TypeId",189],[3,"ParseFloatError",190],[3,"ParseIntError",191],[4,"ErrorKind",182],[15,"u8"],[4,"Error",111],[6,"Result",111],[8,"Read",186],[8,"Error",192],[4,"Option",193],[8,"IntoIterator",194],[4,"Array",145],[4,"Error",145],[6,"Result",145]],"b":[[38,"impl-Display-for-Error"],[39,"impl-Debug-for-Error"],[43,"impl-From%3CError%3E-for-Error"],[44,"impl-From%3CError%3E-for-Error"],[46,"impl-From%3CError%3E-for-Error"],[87,"impl-Display-for-Error"],[88,"impl-Debug-for-Error"],[89,"impl-Display-for-DisplayAscii%3C\'_%3E"],[90,"impl-Debug-for-DisplayAscii%3C\'a%3E"],[92,"impl-From%3CParseFloatError%3E-for-Error"],[93,"impl-From%3CError%3E-for-Error"],[94,"impl-From%3CParseIntError%3E-for-Error"],[95,"impl-From%3CErrorKind%3E-for-Error"],[120,"impl-Display-for-Error"],[121,"impl-Debug-for-Error"],[135,"impl-Display-for-DisplayAscii%3C\'_%3E"],[136,"impl-Debug-for-DisplayAscii%3C\'a%3E"],[160,"impl-Debug-for-Error"],[161,"impl-Display-for-Error"]]},\
"mesh_part":{"doc":"","t":"RFF","n":["USAGE","main","main_d"],"q":[[0,"mesh_part"],[3,"anyhow"],[4,"getopts"],[5,"coupe_tools"],[6,"mesh_io"],[7,"mesh_io::weight"],[8,"alloc::vec"]],"d":["","",""],"i":[0,0,0],"f":[0,[[],[[2,[1]]]],[[3,4,5,6],[[2,[[8,[7]]]]]]],"c":[],"p":[[15,"tuple"],[6,"Result",3],[3,"Matches",4],[4,"EdgeWeightDistribution",5],[3,"Mesh",6],[4,"Array",7],[15,"usize"],[3,"Vec",8]],"b":[]},\
"mesh_points":{"doc":"","t":"RFF","n":["USAGE","main","write_points"],"q":[[0,"mesh_points"],[3,"anyhow"],[4,"mesh_io"],[5,"std::io"]],"d":["","",""],"i":[0,0,0],"f":[0,[[],[[2,[1]]]],[[-1,3,4],[[2,[1]]],5]],"c":[],"p":[[15,"tuple"],[6,"Result",3],[3,"Mesh",4],[15,"bool"],[8,"Write",5]],"b":[]},\
"mesh_refine":{"doc":"","t":"RF","n":["USAGE","main"],"q":[[0,"mesh_refine"],[2,"anyhow"]],"d":["",""],"i":[0,0],"f":[0,[[],[[2,[1]]]]],"c":[],"p":[[15,"tuple"],[6,"Result",2]],"b":[]},\
"mesh_reorder":{"doc":"","t":"RFFF","n":["USAGE","main","shuffle","shuffle_couple"],"q":[[0,"mesh_reorder"],[4,"anyhow"],[5,"mesh_io"],[6,"rand_core"],[7,"alloc::vec"],[8,"core::clone"]],"d":["","","",""],"i":[0,0,0,0],"f":[0,[[],[[2,[1]]]],[[-1,3],3,4],[[-1,[5,[-2]],[5,[6]]],[[1,[[7,[-2]],[7,[6]],[7,[8]]]]],4,9]],"c":[],"p":[[15,"tuple"],[6,"Result",4],[3,"Mesh",5],[8,"RngCore",6],[15,"slice"],[15,"isize"],[3,"Vec",7],[15,"usize"],[8,"Clone",8]],"b":[]},\
"mesh_svg":{"doc":"","t":"DRFFLLMLLLFFLLFLLLFFMFFLLLLFLLF","n":["Path","USAGE","add_element_and_neighbors_to_path","blob_paths","borrow","borrow_mut","color","deref","deref_mut","drop","element_lookup","elements","from","from_subset","frontier","init","into","is_in_subset","main","merge_paths","nodes","path_to_coords","paths","to_subset","to_subset_unchecked","try_from","try_into","twobytwo","type_id","vzip","write_svg"],"q":[[0,"mesh_svg"],[31,"std::collections::hash::set"],[32,"sprs::sparse"],[33,"core::ops::function"],[34,"core::marker"],[35,"mesh_io"],[36,"core::iter::traits::iterator"],[37,"coupe::geometry"],[38,"alloc::vec"],[39,"anyhow"],[40,"core::option"],[41,"core::result"],[42,"core::any"],[43,"std::io"]],"d":["","","Adds an element and its neighbors that have the same ref …","Returns the list of “blobs”/frontiers/paths of the mesh…","","","","","","","Returns a function that looks up an element given its ID.","Returns the list of elements that are interesting.","Returns the argument unchanged.","","Returns the path that goes around the given set of …","","Calls <code>U::from(self)</code>.","","","Merge a collection of connected paths into several …","","Returns the coordinates from a path and removes redundant …","","","","","","","","",""],"i":[0,0,0,0,20,20,20,20,20,20,0,0,20,20,0,20,20,20,0,0,20,0,0,20,20,20,20,0,20,20,0],"f":[0,0,[[[2,[1]],3,1,-1,[5,[4]]],6,[7,8]],[9,[[0,[10]]]],[-1,-2,[],[]],[-1,-2,[],[]],0,[1,-1,[]],[1,-1,[]],[1,6],[9,[[0,[7]]]],[9,[[0,[10]]]],[-1,-1,[]],[-1,-2,[],[]],[[[2,[1]],9,-1,[5,[4]]],[[12,[[12,[11]]]]],7],[[],1],[-1,-2,[],[]],[-1,13,[]],[[],[[14,[6]]]],[[[12,[[12,[1]]]]],[[0,[10]]]],0,[[9,[15,[1]]],[[12,[11]]]],[9,[[0,[10]]]],[-1,[[16,[-2]]],[],[]],[-1,-2,[],[]],[-1,[[17,[-2]]],[],[]],[-1,[[17,[-2]]],[],[]],[[[15,[1]]],[[0,[10]]]],[-1,18,[]],[-1,-2,[],[]],[[-1,9,13],[[14,[6]]],19]],"c":[],"p":[[15,"usize"],[3,"HashSet",31],[15,"isize"],[15,"f64"],[6,"CsMatView",32],[15,"tuple"],[8,"Fn",33],[8,"Copy",34],[3,"Mesh",35],[8,"Iterator",36],[6,"Point2D",37],[3,"Vec",38],[15,"bool"],[6,"Result",39],[15,"slice"],[4,"Option",40],[4,"Result",41],[3,"TypeId",42],[8,"Write",43],[3,"Path",0]],"b":[]},\
"meshio":{"doc":"","t":"DLLLLFFFFFFFFFFFFFFLLL","n":["MeditElement","borrow","borrow_mut","from","into","mio_mesh_coordinates","mio_mesh_dimension","mio_mesh_element","mio_mesh_element_count","mio_mesh_free","mio_mesh_node_count","mio_mesh_read","mio_partition_free","mio_partition_read","mio_partition_write","mio_weights_count","mio_weights_first_criterion","mio_weights_free","mio_weights_read","try_from","try_into","type_id"],"q":[[0,"meshio"],[22,"mesh_io"],[23,"core::ffi"],[24,"mesh_io::weight"],[25,"core::result"],[26,"core::any"]],"d":["","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","",""],"i":[0,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5],"f":[0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-1,[]],[-1,-2,[],[]],[[1,2],3],[1,4],[[5,1,2],6],[1,7],[1,6],[1,7],[4,1],[[7,7],6],[[7,7,4],4],[[4,7,7],4],[8,7],[[3,8],6],[8,6],[4,8],[-1,[[9,[-2]]],[],[]],[-1,[[9,[-2]]],[],[]],[-1,10,[]]],"c":[],"p":[[3,"Mesh",22],[15,"usize"],[15,"f64"],[6,"c_int",23],[3,"MeditElement",0],[15,"tuple"],[15,"u64"],[4,"Array",24],[4,"Result",25],[3,"TypeId",26]],"b":[]},\
"num_part":{"doc":"","t":"NENNNNLLLLALLLLLLLLLFLLLLLLLLLMMMMMMMMMMDDRMMLLLLMMFLLLLMLLLLLLMLLLLLLLLLMFMLLLLLLLLLLFLLM","n":["Beta","Distribution","Exp","Normal","Pareto","Uniform","borrow","borrow_mut","clone","clone_into","database","deref","deref_mut","drop","from","from_subset","init","into","into_params","is_in_subset","main","parse","samples","to_owned","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip","alpha","beta","high","lambda","low","mean","scale","scale","shape","std_dev","Database","Experiment","MIGRATIONS","algo_iterations","algorithm","borrow","borrow","borrow_mut","borrow_mut","case_type","conn","default_path","deref","deref","deref_mut","deref_mut","distribution_id","drop","drop","from","from","from_subset","from_subset","imbalance","init","init","insert_distribution","insert_experiment","insert_seed","into","into","is_in_subset","is_in_subset","iteration","open","seed_id","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","upgrade_schema","vzip","vzip","weight_count"],"q":[[0,"num_part"],[30,"num_part::Distribution"],[40,"num_part::database"],[90,"anyhow"],[91,"core::iter::traits::iterator"],[92,"alloc::boxed"],[93,"rand::rng"],[94,"core::option"],[95,"core::result"],[96,"core::any"],[97,"std::path"],[98,"alloc::string"],[99,"rusqlite"]],"d":["","","","","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","List of database migrations, to seamlessly update the …","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","Initialize, or update the database’s schema to the …","","",""],"i":[1,0,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,23,23,24,25,24,26,27,23,27,26,0,0,0,18,18,18,16,18,16,18,16,0,18,16,18,16,18,18,16,18,16,18,16,18,18,16,16,16,16,18,16,18,16,18,0,18,18,16,18,16,18,16,18,16,18,16,0,18,16,18],"f":[0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,1],[[-1,-2],2,[],[]],0,[3,-1,[]],[3,-1,[]],[3,2],[-1,-1,[]],[-1,-2,[],[]],[[],3],[-1,-2,[],[]],[1,[[5,[4]]]],[-1,6,[]],[[],[[7,[2]]]],[8,[[7,[1]]]],[[1,-1],[[10,[9]]],11],[-1,-2,[],[]],[-1,[[12,[-2]]],[],[]],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,14,[]],[-1,-2,[],[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,0,[[],[[7,[15]]]],[3,-1,[]],[3,-1,[]],[3,-1,[]],[3,-1,[]],0,[3,2],[3,2],[-1,-1,[]],[-1,-1,[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],3],[[],3],[[16,8,[5,[4]]],[[7,[17]]]],[[16,18],[[7,[2]]]],[[16,[20,[19]]],[[7,[17]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,6,[]],[-1,6,[]],0,[[[12,[21]]],[[7,[16]]]],0,[-1,[[12,[-2]]],[],[]],[-1,[[12,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,[[13,[-2]]],[],[]],[-1,14,[]],[-1,14,[]],[22,[[7,[2]]]],[-1,-2,[],[]],[-1,-2,[],[]],0],"c":[],"p":[[4,"Distribution",0],[15,"tuple"],[15,"usize"],[15,"f64"],[15,"array"],[15,"bool"],[6,"Result",90],[15,"str"],[8,"Iterator",91],[3,"Box",92],[8,"Rng",93],[4,"Option",94],[4,"Result",95],[3,"TypeId",96],[3,"PathBuf",97],[3,"Database",40],[15,"i64"],[3,"Experiment",40],[15,"u8"],[15,"slice"],[3,"String",98],[3,"Connection",99],[13,"Beta",30],[13,"Uniform",30],[13,"Exp",30],[13,"Normal",30],[13,"Pareto",30]],"b":[]},\
"part_bench":{"doc":"","t":"DRLLFFFLLLLLLLLLFFFFMMLLLLLL","n":["RangeWithStep","USAGE","borrow","borrow_mut","build_pool","configure_criterion","criterion_options","deref","deref_mut","drop","from","from_subset","init","into","into_iter","is_in_subset","main","main_d","measure_efficiency","parse_ranges","range","step_by","to_subset","to_subset_unchecked","try_from","try_into","type_id","vzip"],"q":[[0,"part_bench"],[28,"core::option"],[29,"rayon_core::thread_pool"],[30,"criterion"],[31,"getopts"],[32,"anyhow"],[33,"getopts"],[34,"mesh_io"],[35,"mesh_io::weight"],[36,"alloc::vec"],[37,"alloc::string"],[38,"core::ops::function"],[39,"core::marker"],[40,"core::result"],[41,"core::any"]],"d":["","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","",""],"i":[0,0,9,9,0,0,0,9,9,9,9,9,9,9,9,9,0,0,0,0,9,9,9,9,9,9,9,9],"f":[0,0,[-1,-2,[],[]],[-1,-2,[],[]],[[[2,[1]]],3],[[4,5],[[6,[4]]]],[7,8],[1,-1,[]],[1,-1,[]],[1,8],[-1,-1,[]],[-1,-2,[],[]],[[],1],[-1,-2,[],[]],[9],[-1,10,[]],[[],[[6,[8]]]],[[5,11,12,13],[[6,[[14,[1]]]]]],[[4,15,[2,[15]],-1],[[6,[8]]],[16,17]],[18,[[6,[[14,[9]]]]]],0,0,[-1,[[2,[-2]]],[],[]],[-1,-2,[],[]],[-1,[[19,[-2]]],[],[]],[-1,[[19,[-2]]],[],[]],[-1,20,[]],[-1,-2,[],[]]],"c":[],"p":[[15,"usize"],[4,"Option",28],[3,"ThreadPool",29],[3,"Criterion",30],[3,"Matches",31],[6,"Result",32],[3,"Options",31],[15,"tuple"],[3,"RangeWithStep",0],[15,"bool"],[4,"EdgeWeightDistribution",33],[3,"Mesh",34],[4,"Array",35],[3,"Vec",36],[3,"String",37],[8,"FnMut",38],[8,"Send",39],[15,"str"],[4,"Result",40],[3,"TypeId",41]],"b":[]},\
"part_info":{"doc":"","t":"DRLLLLLFLLLMLLLFFMMMMLLLMLLLLF","n":["CriterionStats","USAGE","borrow","borrow_mut","deref","deref_mut","drop","empty_part_count","fmt","from","from_subset","imbalance","init","into","is_in_subset","lambda_cut","main","max_part_weight","max_part_weight_count","min_part_weight","min_part_weight_count","to_string","to_subset","to_subset_unchecked","total_weight","try_from","try_into","type_id","vzip","weight_stats"],"q":[[0,"part_info"],[30,"core::fmt"],[31,"core::fmt"],[32,"coupe_tools"],[33,"alloc::vec"],[34,"core::iter::traits::accum"],[35,"core::ops::arith"],[36,"num_traits::cast"],[37,"core::marker"],[38,"core::marker"],[39,"alloc::string"],[40,"core::option"],[41,"core::result"],[42,"core::any"],[43,"alloc::boxed"],[44,"core::marker"],[45,"core::cmp"],[46,"core::ops::arith"]],"d":["","","","","","","","","","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","","Wrapper around coupe’s [coupe::topology::lambda_cut] …","","","","","","","","","","","","","",""],"i":[0,0,4,4,4,4,4,0,4,4,4,4,4,4,4,0,0,4,4,4,4,4,4,4,4,4,4,4,4,0],"f":[0,0,[-1,-2,[],[]],[-1,-2,[],[]],[1,-1,[]],[1,-1,[]],[1,2],[[[3,[1]],1],1],[[[4,[-1]],5],6,7],[-1,-1,[]],[-1,-2,[],[]],0,[[],1],[-1,-2,[],[]],[-1,8,[]],[[[10,[9]],[3,[1]],11,[3,[[12,[-1]]]]],-1,[13,14,[15,[9]],16,17,18]],[[],[[19,[2]]]],0,0,0,0,[-1,20,[]],[-1,[[21,[-2]]],[],[]],[-1,-2,[],[]],0,[-1,[[22,[-2]]],[],[]],[-1,[[22,[-2]]],[],[]],[-1,23,[]],[-1,-2,[],[]],[[1,[3,[1]],[3,[[12,[-1]]]]],[[12,[[24,[7]]]]],[25,7,16,17,18,26,27,28,29,30,13]]],"c":[],"p":[[15,"usize"],[15,"tuple"],[15,"slice"],[3,"CriterionStats",0],[3,"Formatter",30],[6,"Result",30],[8,"Display",30],[15,"bool"],[15,"f64"],[6,"CsMatView",31],[4,"EdgeWeightDistribution",32],[3,"Vec",33],[8,"Sum",34],[8,"Mul",35],[8,"AsPrimitive",36],[8,"Send",37],[8,"Sync",37],[8,"FromPrimitive",36],[6,"Result",38],[3,"String",39],[4,"Option",40],[4,"Result",41],[3,"TypeId",42],[3,"Box",43],[8,"Copy",37],[8,"ToPrimitive",36],[8,"Zero",44],[8,"PartialOrd",45],[8,"Div",35],[8,"Sub",35]],"b":[]},\
"weight_gen":{"doc":"","t":"ENENDNRNNNFLLLLLLLLLLLLLLLLLLLLLLLLLLLLMLLLLLLLLLFFFMLLLLLLLLLLLLLLLLLLLLLF","n":["Axis","Constant","Distribution","Linear","Spike","Spike","USAGE","X","Y","Z","apply_distribution","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","deref","deref","deref","deref_mut","deref_mut","deref_mut","drop","drop","drop","from","from","from","from_str","from_subset","from_subset","from_subset","height","init","init","init","into","into","into","is_in_subset","is_in_subset","is_in_subset","main","parse_distribution","partial_cmp","position","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","vzip","vzip","vzip","weight_gen"],"q":[[0,"weight_gen"],[75,"coupe::geometry"],[76,"core::ops::function"],[77,"alloc::boxed"],[78,"anyhow"],[79,"core::cmp"],[80,"core::option"],[81,"core::result"],[82,"core::any"],[83,"mesh_io"],[84,"alloc::string"],[85,"alloc::vec"],[86,"getopts"]],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,1,0,1,0,1,0,6,6,6,0,6,7,1,6,7,1,6,7,1,6,7,1,6,7,1,6,7,1,6,7,1,6,7,1,6,6,7,1,7,6,7,1,6,7,1,6,7,1,0,0,0,7,6,7,1,6,7,1,6,7,1,6,7,1,6,7,1,6,7,1,6,7,1,0],"f":[0,0,0,0,0,0,0,0,0,0,[[1,[3,[2]]],[[5,[4]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[6,6],[7,7],[1,1],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[[-1,-2],8,[],[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,-1,[]],[9,8],[9,8],[9,8],[-1,-1,[]],[-1,-1,[]],[-1,-1,[]],[10,[[11,[6]]]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],0,[[],9],[[],9],[[],9],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,12,[]],[-1,12,[]],[-1,12,[]],[[],[[11,[8]]]],[10,[[11,[1]]]],[[13,13],14],0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,[[15,[-2]]],[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,[[16,[-2]]],[],[]],[-1,17,[]],[-1,17,[]],[-1,17,[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[18,[20,[19]],21],[[11,[8]]]]],"c":[],"p":[[4,"Distribution",0],[6,"PointND",75],[15,"slice"],[8,"Fn",76],[3,"Box",77],[4,"Axis",0],[3,"Spike",0],[15,"tuple"],[15,"usize"],[15,"str"],[6,"Result",78],[15,"bool"],[15,"f64"],[4,"Ordering",79],[4,"Option",80],[4,"Result",81],[3,"TypeId",82],[3,"Mesh",83],[3,"String",84],[3,"Vec",85],[3,"Matches",86]],"b":[]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
